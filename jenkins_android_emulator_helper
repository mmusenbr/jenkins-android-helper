#!/usr/bin/env python3

# This file is part of Jenkins-Android-Emulator Helper.
#    Copyright (C) 2018  Michael Musenbrock
#
# Jenkins-Android-Helper is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Jenkins-Android-Helper is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Jenkins-Android-Helper.  If not, see <http://www.gnu.org/licenses/>.

## ANDROID_SDK_ROOT needs to be set to the Android SDK

import os
import sys
import re
import argparse
import traceback

from jenkins_android_sdk import AndroidSDK
import ini_helper_functions
import android_emulator_helper_functions

_OPWD = os.getcwd()

### assume that the script runs locally
if not 'WORKSPACE' in os.environ:
    print("It seems that the script runs outside Jenkins. WORKSPACE will be set to PWD [" + _OPWD + "]!")
    os.environ["WORKSPACE"] = _OPWD

## Make sure the avd is installed in the current workspace
os.environ["ANDROID_AVD_HOME"] = os.environ["WORKSPACE"]

android_sdk = AndroidSDK()

SCRIPT_RUN_MODE_UNKNOWN = 0
SCRIPT_RUN_MODE_CREATE_AVD_WITH_UNIQUE_NAME = 1
SCRIPT_RUN_MODE_START_EMULATOR = 2
SCRIPT_RUN_MODE_WAIT_FOR_AVD_STARTUP = 3
SCRIPT_RUN_MODE_KILL_AVD_AND_CLEANUP = 4

SCRIPT_RUN_MODE = SCRIPT_RUN_MODE_UNKNOWN

ANDROID_AVD_HW_PROPS_SCREEN_DENSITY_PROP_NAME = "hw.lcd.density"

ANDROID_AVD_HW_PROPS_LIST = []

### error codes
ERROR_CODE_SUCCESS = 0
ERROR_CODE_ADB_NO_FREE_PORT = 1
ERROR_CODE_NO_ANDROID_SERIAL = 2
ERROR_CODE_SDK_ENVVAR_NOT_SET = 3
ERROR_CODE_SDK_ROOT_DOES_NOT_EXIST = 6

def android_emulator_cfg_dpi_for_density(density):
    if density == "ldpi":
        return "120"
    elif density == "mdpi":
        return "160"
    elif density == "tvdpi":
        return "213"
    elif density == "hdpi":
        return "240"
    elif density == "xhdpi":
        return "320"
    elif density == "xxhdpi":
        return "480"
    elif density == "xxxhdpi":
        return "640"
    ## is a number
    elif re.match("^[0-9]+", density):
        return density
    ## not a number
    else:
        return ""

## Prior the python port multiple -p/-P values could be given, now we only support '-p <key:val> <key:val> ...' format
def __convert_sysargv_from_legacy_to_new_format(argv):
    # try to keep the order, if the legacy -p/-P options where scattered, use the first position to add the 'new' values
    # so split the list into the part before the first -p/-P, the properties itself and the rest
    # if something with a new format -p <xxx> <xxx> comes in, the mechanism still works
    argv_before_properties = []
    argv_properties = []
    argv_after_properties = []

    first_found = False
    idx = 0
    while idx < len(argv):
        arg = argv[idx]
        if arg == '-P' or arg == '-p':
             try:
                 argv_properties = argv_properties + [ argv[idx + 1] ]
                 idx = idx + 1
             except IndexError:
                 pass
        else:
             # not yet found
             if len(argv_properties) == 0:
                 argv_before_properties = argv_before_properties + [ arg ]
             else:
                 argv_after_properties = argv_after_properties + [ arg ]

        idx = idx + 1

    return argv_before_properties + [ '-p' ] + argv_properties + argv_after_properties


sys.argv = __convert_sysargv_from_legacy_to_new_format(sys.argv)

parser = argparse.ArgumentParser(description="""The environment variable ANDROID_SDK_ROOT needs to be set to the Android SDK.
The environment variable ANDROID_AVD_HOME will be set to the current WORKSPACE.
Additionally the WORKSPACE variable needs to be set to store the avd name to be later referenced by
subsequent calls.
Additionally it's curucial that the device creation/startup is not done concurrently on a node, otherwise
there will be a race-condition on retrieving a free port the the emulator.

ATTENTION: wasn't able to properly configure usage groups and exclusive groups as needed, shoud look like this:
jenkins_android_emulator_helper -C -i <emulator image path> [ { -p <hwkey>:<hwprop> } ] [ -s <screen density> ] [ -z <sdcard size> ]
jenkins_android_emulator_helper -S -r <screen resolution> -l <language> [-w] [-k] [ -c <additional CLI options> ]
jenkins_android_emulator_helper -W
jenkins_android_emulator_helper -D
jenkins_android_emulator_helper -K

""", formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument('-C', action='store_true', dest='mode_create', help='Create a new AVD in the WORKSPACE with a unique name')
parser.add_argument('-S', action='store_true', dest='mode_start', help='Start the previously created android emulator. The emulator will be started in background. By default no window is shown and the user data is wiped')
parser.add_argument('-W', action='store_true', dest='mode_wait', help='Wait for the android emulator to startup properly, if this call succeeds, you can be sure that the emulator has started up')
parser.add_argument('-D', action='store_true', dest='mode_disableanim', help='Disable animations on the running emulator')
parser.add_argument('-K', action='store_true', dest='mode_kill', help='Kill the android emulator, first try to send \'emu kill\' via adb, then send SIGTERM and then SIGKILL')
parser.add_argument('-i', type=str, metavar='emulator image', dest='emulator_image', help='Emulator image to use in form of eg: system-images;android-24;default;x86_64')
parser.add_argument('-p', type=str, metavar='hwkey:hwprop', nargs='*', dest='hwprops', help='Multiple occurances allowed, a list of key:value pairs of hardware parameters for the AVD')
parser.add_argument('-s', type=str, metavar='screen density', dest='screen_density', help='The screen density for the emulator, either dpi or a string representation (xhdpi)')
parser.add_argument('-r', type=str, metavar='screen resolution', dest='screen_resolution', help='The resolution to use on emulator start')
parser.add_argument('-l', type=str, metavar='language', dest='device_lang', help='Set the properties persist.sys.language and persist.sys.country given of a locale in form of eg en_US')
parser.add_argument('-w', action='store_true', dest='show_window', help='Display emulator window, by default it is not shown')
parser.add_argument('-k', action='store_true', dest='keep_user_data', help='Keep the user-data, default is to wipe on every start')
parser.add_argument('-z', type=str, metavar='sdcard size', dest='sdcard_size', help='Size of the SD-Card of the AVD')
parser.add_argument('-c', type=str, metavar='emulator cli opts', dest='emulator_cli_opts', help='Set additional CLI parameters for the emulator call')
args = parser.parse_args()

if args.hwprops is not None:
    for hwprop in args.hwprops:
        ANDROID_AVD_HW_PROPS_LIST.append(hwprop)

if args.screen_density is not None and args.screen_density != "":
    android_emulator_screen_density = android_emulator_cfg_dpi_for_density(args.screen_density)

    if android_emulator_screen_density is not None and android_emulator_screen_density != "":
        ANDROID_AVD_HW_PROPS_LIST.append(ANDROID_AVD_HW_PROPS_SCREEN_DENSITY_PROP_NAME + ":" + android_emulator_screen_density)

if args.device_lang is not None and args.device_lang != "":
    try:
        dev_lang_split = args.device_lang.strip().split("_")
        ANDROID_DEVICE_LANG = dev_lang_split[0]
        ANDROID_DEVICE_COUNTRY = dev_lang_split[1]
    except:
        print("Given device language [" + args.device_lang + "]not in form of <LANG>_<COUNTRY>")
        ANDROID_DEVICE_LANG = ""
        ANDROID_DEVICE_COUNTRY = ""

sdcard_size = "default"
if args.sdcard_size is not None:
    sdcard_size = args.sdcard_size

additional_emulator_cli_options = []
if args.emulator_cli_opts is not None and args.emulator_cli_opts != "":
    additional_emulator_cli_options = args.emulator_cli_opts.strip().split(" ")

exit_code = 0

try:
    if args.mode_create:
        exit_code = android_sdk.create_avd(args.emulator_image, sdcard_size=sdcard_size, additional_properties=ANDROID_AVD_HW_PROPS_LIST)
    elif args.mode_start:
        exit_code = android_sdk.emulator_start(skin=args.screen_resolution, lang=ANDROID_DEVICE_LANG, country=ANDROID_DEVICE_COUNTRY, show_window=args.show_window, keep_user_data=args.keep_user_data, additional_cli_opts=additional_emulator_cli_options)
    elif args.mode_wait:
        exit_code = android_sdk.emulator_wait_for_start()
    elif args.mode_disableanim:
        exit_code = android_sdk.emulator_disable_animations()
    elif args.mode_kill:
        exit_code = android_sdk.emulator_kill()
    else:
        parser.print_help()
        exit_code = 1
except:
    exit_code = 100
    traceback.print_exc

sys.exit(exit_code)
