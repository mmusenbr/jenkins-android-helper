#!/usr/bin/env sh

# This file is part of Jenkins-Android-Emulator Helper.
#    Copyright (C) 2018  Michael Musenbrock
#
# Jenkins-Android-Helper is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Jenkins-Android-Helper is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Jenkins-Android-Helper.  If not, see <http://www.gnu.org/licenses/>.

set -e

if [ -n "${ANDROID_EMULATOR_HELPER_DEBUG}" ]; then
	set -x
fi

## ANDROID_SDK_ROOT needs to be set to the Android SDK

_OPWD=`pwd`
SCRIPT_DIR=$(cd `dirname $0`; pwd)

LIBRARY_DIR=/usr/lib/jenkins-android-helper

### assume that the script runs locally
if [ -z "${WORKSPACE}" ]; then
	echo "It seems that the script runs outside Jenkins. WORKSPACE will be set to PWD [${_OPWD}]!"
	WORKSPACE="${_OPWD}"
fi

###### source helper scripts ####
source_library() {
	if [ -e "${LIBRARY_DIR}/${1}" ]; then
		. "${LIBRARY_DIR}/${1}"
	elif [ -e "${SCRIPT_DIR}/${1}" ]; then
		. "${SCRIPT_DIR}/${1}"
	else
		echo "Library ${1} could not be found, abort"
		exit 1
	fi
}

source_library ini_helper_functions.sh
source_library android_emulator_helper_functions.sh

## Make sure the avd is installed in the current workspace
ANDROID_AVD_HOME="${WORKSPACE}"
export ANDROID_AVD_HOME

SCRIPT_RUN_MODE_UNKNOWN=0
SCRIPT_RUN_MODE_CREATE_AVD_WITH_UNIQUE_NAME=1
SCRIPT_RUN_MODE_START_EMULATOR=2
SCRIPT_RUN_MODE_WAIT_FOR_AVD_STARTUP=3
SCRIPT_RUN_MODE_KILL_AVD_AND_CLEANUP=4

SCRIPT_RUN_MODE=${SCRIPT_RUN_MODE_UNKNOWN}

ANDROID_AVD_HW_PROPS_SCREEN_DENSITY_PROP_NAME="hw.lcd.density"

ANDROID_AVD_HW_PROPS_LIST=""

## default emulator switches
ANDROID_EMULATOR_SWITCH_NO_WINDOW="-no-window"
ANDROID_EMULATOR_SWITCH_WIPE_DATA="-wipe-data"

ANDROID_EMULATOR_SWITCH_DEFAULT="${ANDROID_EMULATOR_SWITCH_WIPE_DATA} ${ANDROID_EMULATOR_SWITCH_NO_WINDOW}"
ANDROID_EMULATOR_SWITCHES="${ANDROID_EMULATOR_SWITCH_DEFAULT}"


### error codes
ERROR_CODE_SUCCESS=0
ERROR_CODE_ADB_NO_FREE_PORT=1
ERROR_CODE_NO_ANDROID_SERIAL=2
ERROR_CODE_AVD_CREATE_NO_IMAGE_GIVEN=5

ERROR_CODE_SDK_ROOT_DOES_NOT_EXIST=6

usage() {
	cat <<EOOPTS
`basename $0` -C -i <emulator image path> [ { -p <hwkey>:<hwprop> } ] [ -s <screen density> ]
`basename $0` -S -r <screen resolution> -l <language> [-w] [-k] [ -c <additional CLI options> ]
`basename $0` -W
`basename $0` -K

The environment variable ANDROID_SDK_ROOT needs to be set to the Android SDK.
The environment variable ANDROID_AVD_HOME will be set to the current WORKSPACE.
Additionally the WORKSPACE variable needs to be set to store the avd name to be later referenced by
subsequent calls.
Additionally it's curucial that the device creation/startup is not done concurrently on a node, otherwise
there will be a race-condition on retrieving a free port the the emulator.

OPTIONS:
  -C                           Create a new AVD in the WORKSPACE with a unique name
  -S                           Start the previously created android emulator. The emulator will be started in background.
                               The following default CLI parameters will be set: '${ANDROID_EMULATOR_SWITCH_DEFAULT}'
  -W                           Kill android emulator, ANDROID_SERIAL needs to be set
  -K                           Kill the android emulator, first try to send 'emu kill' via adb, then send SIGTERM and then SIGKILL

  -i "<emulator image path>"   Emulator image to use in form of eg: system-images;android-24;default;x86_64
  -p "<hwkey>:<hwprop>"        Multiple occurances allowed, a list of key:value pairs of hardware parameters for the AVD
  -P "<hwkey>:<hwprop>"        Deprecated: use '-p' instead
  -s "<screen density>"        The screen density for the emulator, either dpi or a string representation (xhdpi)

  -r "<screen resolution>"     The resolution to use on emulator start
  -l "<language>"              Set the properties persist.sys.language and persist.sys.country given of a locale in form of eg en_US
  -w                           Display emulator window by not setting '${ANDROID_EMULATOR_SWITCH_NO_WINDOW}'-switch
  -k                           Keep the user-data by no setting'${ANDROID_EMULATOR_SWITCH_WIPE_DATA}'-switch
  -c "<emulator cli opts>"     Set additional CLI parameters for the emulator call
EOOPTS
	exit 1
}

validate_environment() {
	if [ -z "${ANDROID_SDK_ROOT}" ]; then
		echo "Environment variable ANDROID_SDK_ROOT needs to be set"
		exit ${ERROR_CODE_SDK_ENVVAR_NOT_SET}
	fi

	if [ ! -d "${ANDROID_SDK_ROOT}" ]; then
		echo "Directory [${ANDROID_SDK_ROOT}] does not  exist!!"
		exit ${ERROR_CODE_SDK_ROOT_DOES_NOT_EXIST}
	fi
}

validate_create_input() {
	if [ -z "${ANDROID_SYSTEM_IMAGE}" ]; then
		echo "An android emulator image needs to be set!"
		echo ""
		usage
		exit ${ERROR_CODE_AVD_CREATE_NO_IMAGE_GIVEN}
	fi
}

android_emulator_cfg_dpi_for_density() {
	case "${1}" in
	"ldpi")      echo "120" ;;
	"mdpi")      echo "160" ;;
	"tvdpi")     echo "213" ;;
	"hdpi")      echo "240" ;;
	"xhdpi")     echo "320" ;;
	"xxhdpi")    echo "480" ;;
	"xxxhdpi")   echo "640" ;;
	## not a number
	*[!0-9]*|'') echo ""    ;;
	## everything else is a number
	*)           echo "${1}";;
	esac
}

android_emulator_create_avd() {
	echo no | ${ANDROID_SDK_TOOLS_BIN_AVDMANAGER} create avd -f -c 100M -n "${ANDROID_AVD_NAME}" -k "${ANDROID_SYSTEM_IMAGE}"
}

android_emulator_store_custom_hw_prop() {
	local HW_PROP_KEY_VAL_PAIR="${1}"

	if [ -n "${ANDROID_AVD_HW_PROPS_LIST}" ]; then
		ANDROID_AVD_HW_PROPS_LIST="${ANDROID_AVD_HW_PROPS_LIST};"
	fi

	ANDROID_AVD_HW_PROPS_LIST="${ANDROID_AVD_HW_PROPS_LIST}${HW_PROP_KEY_VAL_PAIR}"
}

android_emulator_set_custom_hw_props() {
	AVD_DIRECTORY="${ANDROID_AVD_HOME}/${ANDROID_AVD_NAME}.avd"
	AVD_CONFIG_FILE="${AVD_DIRECTORY}/config.ini"

	for keyval in `echo ${ANDROID_AVD_HW_PROPS_LIST} | tr "\;" "\n"`; do 
		ini_file_helper_add_or_update_key_value "${AVD_CONFIG_FILE}" "${keyval}"
	done
}

android_emulator_remove_option_from_emulator_cli_switches() {
		local SWITCH_TO_REMOVE=${1}
		ANDROID_EMULATOR_SWITCHES=`echo "${ANDROID_EMULATOR_SWITCHES}" | sed -E "s/(^| )${SWITCH_TO_REMOVE}($| )/ /g"`
}

android_emulator_start_emulator() {
	${ANDROID_SDK_TOOLS_BIN_EMULATOR} -avd "${ANDROID_AVD_NAME}" \
			-skin "${ANDROID_EMULATOR_SCREEN_RESOLUTION}" \
			-prop persist.sys.language=${ANDROID_DEVICE_LANG} -prop persist.sys.country=${ANDROID_DEVICE_COUNTRY} \
			${ANDROID_EMULATOR_SWITCHES} \
			${ANDROID_EMULATOR_START_CLI_OPTS} &
}

while getopts ":P:p:i:s:l:r:c:wkhSCWK" opt; do
	case $opt in
	P|p)
		android_emulator_store_custom_hw_prop "${OPTARG}"
		;;
	r)
		ANDROID_EMULATOR_SCREEN_RESOLUTION="${OPTARG}"
		;;
	s)
		ANDROID_EMULATOR_SCREEN_DENSITY_STR="${OPTARG}"
		ANDROID_EMULATOR_SCREEN_DENSITY=`android_emulator_cfg_dpi_for_density "${ANDROID_EMULATOR_SCREEN_DENSITY_STR}"`

		if [ -n "${ANDROID_EMULATOR_SCREEN_DENSITY}" ]; then
			android_emulator_store_custom_hw_prop "${ANDROID_AVD_HW_PROPS_SCREEN_DENSITY_PROP_NAME}:${ANDROID_EMULATOR_SCREEN_DENSITY}"
		fi
		;;
	l)
		ANDROID_DEVICE_LOCALE="${OPTARG}"
		ANDROID_DEVICE_LANG="`echo "${ANDROID_DEVICE_LOCALE}" | cut -f1 -d_`"
		ANDROID_DEVICE_COUNTRY="`echo "${ANDROID_DEVICE_LOCALE}" | cut -f2 -d_`"
		;;
	i)
		ANDROID_SYSTEM_IMAGE="${OPTARG}"
		;;
	w)
		android_emulator_remove_option_from_emulator_cli_switches ${ANDROID_EMULATOR_SWITCH_NO_WINDOW}
		;;
	k)
		android_emulator_remove_option_from_emulator_cli_switches ${ANDROID_EMULATOR_SWITCH_WIPE_DATA}
		;;
	c)
		ANDROID_EMULATOR_START_CLI_OPTS="${OPTARG}"
		;;
	C)
		SCRIPT_RUN_MODE=${SCRIPT_RUN_MODE_CREATE_AVD_WITH_UNIQUE_NAME}
		;;
	S)
		SCRIPT_RUN_MODE=${SCRIPT_RUN_MODE_START_EMULATOR}
		;;
	K)
		SCRIPT_RUN_MODE=${SCRIPT_RUN_MODE_KILL_AVD_AND_CLEANUP}
		;;
	W)
		SCRIPT_RUN_MODE=${SCRIPT_RUN_MODE_WAIT_FOR_AVD_STARTUP}
		;;
	h)
		usage
		exit 0
		;;
	\?)
		echo "Invalid option: -$OPTARG"
		usage
		exit 1
	;;
	esac
done

validate_environment

case ${SCRIPT_RUN_MODE} in
${SCRIPT_RUN_MODE_UNKNOWN})
	usage
	;;
${SCRIPT_RUN_MODE_CREATE_AVD_WITH_UNIQUE_NAME})
	validate_create_input
	generate_and_store_unique_avd_name
	read_unique_avd_name_from_store
	android_emulator_create_avd
	android_emulator_set_custom_hw_props
	;;
${SCRIPT_RUN_MODE_START_EMULATOR})
	read_unique_avd_name_from_store
	android_emulator_start_emulator
	;;
${SCRIPT_RUN_MODE_WAIT_FOR_AVD_STARTUP})
	android_emulator_wait_for_emulator_start
	;;
${SCRIPT_RUN_MODE_KILL_AVD_AND_CLEANUP})
	android_emulator_kill_emulator
	;;
esac
