#!/usr/bin/env python3

# This file is part of Jenkins-Android-Emulator Helper.
#    Copyright (C) 2018  Michael Musenbrock
#
# Jenkins-Android-Helper is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Jenkins-Android-Helper is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Jenkins-Android-Helper.  If not, see <http://www.gnu.org/licenses/>.

## ANDROID_SDK_ROOT needs to be set to the Android SDK

import os
import sys
import shutil
import re
import argparse

from jenkins_android_sdk import AndroidSDK
import ini_helper_functions
import jenkins_android_helper_commons

_OPWD = os.getcwd()

### assume that the script runs locally
if not 'WORKSPACE' in os.environ:
    print("It seems that the script runs outside Jenkins. WORKSPACE will be set to PWD [" + _OPWD + "]!")
    os.environ["WORKSPACE"] = _OPWD

## Make sure the avd is installed in the current workspace
os.environ["ANDROID_AVD_HOME"] = os.environ["WORKSPACE"]

android_sdk = AndroidSDK()

GRADLE_PROPS_FILENAME_DEFAULT = "build.gradle"

def get_value_from_props_line(line, key, valregex):
    value = ""
    try:
        splitted_line = line.strip().split(" ", maxsplit=1)
        splitted_key = splitted_line[0]
        splitted_val = splitted_line[1].lstrip("'").rstrip("'")
        if splitted_key == key:
            if re.match(valregex, splitted_val):
                value = splitted_val
    except:
        value = ""

    return value

#[ ( -a <platform version> -b <build tools version> ) | -g <gradle.props file> | -d ] [ -s <system-image> ]
parser = argparse.ArgumentParser(description='The environment variable ANDROID_SDK_ROOT needs to be set.')
parser.add_argument('-a', type=str, metavar='platform version', dest='platformvers', help='The platform version to download (only number: eg 24 for android-24)')
parser.add_argument('-b', type=str, metavar='build tools version', dest='buildtoolsvers', help='The version of the build to to download')
parser.add_argument('-g', type=str, metavar='gradle.props file', dest='gradleprops', help='Read the build tools and the plaform version from the gradle properties')
parser.add_argument('-d', action='store_true', dest='gradlepropsautodetect', help='Same as -g, but tries to auto-detect ' + GRADLE_PROPS_FILENAME_DEFAULT + ' file by using finds first match for ' + GRADLE_PROPS_FILENAME_DEFAULT + ' inside a sub-module')
parser.add_argument('-s', type=str, metavar='system-image', dest='systemimage', help='The system image to download')
args = parser.parse_args()

platform_version = args.platformvers
build_tools_version = args.buildtoolsvers

if args.gradlepropsautodetect or args.gradleprops is not None:
    GRADLE_PROPS_FILENAME = ""
    if args.gradleprops is not None:
        GRADLE_PROPS_FILENAME = args.gradleprops
    elif args.gradlepropsautodetect:
        GRADLE_PROPS_FILENAME = jenkins_android_helper_commons.find_file_in_subtree(os.environ["WORKSPACE"], GRADLE_PROPS_FILENAME_DEFAULT, 2)
        print("Auto-detected build.gradle file [" + GRADLE_PROPS_FILENAME + "]")

    if GRADLE_PROPS_FILENAME != "" and not os.path.isabs(GRADLE_PROPS_FILENAME):
        GRADLE_PROPS_FILENAME = os.path.join(_OPWD, GRADLE_PROPS_FILENAME)

    if jenkins_android_helper_commons.is_file(GRADLE_PROPS_FILENAME):

        # Parse build.props file for buildToolsVersion and compileSdkVersion
        with open(GRADLE_PROPS_FILENAME,'r') as gradlefile:
            for line in gradlefile:
                if build_tools_version is None or build_tools_version == "":
                    build_tools_version = get_value_from_props_line(line, "buildToolsVersion", "^[0-9]+\.[0-9]+\.[0-9]+$")

                if platform_version is None or platform_version == "":
                    platform_version = get_value_from_props_line(line, "compileSdkVersion", "^[0-9]+$")

                if build_tools_version != "" and platform_version != "":
                    break
    else:
        print("gradle.properties file [" + GRADLE_PROPS_FILENAME + "] does not exist!")

    if platform_version == "":
        print("Could not read build tools from gradle file")

    if platform_version == "":
        print("Could not read platform from gradle file")

android_sdk.download_if_neccessary()
android_sdk.info()
android_sdk.validate_or_download_sdk_tools()
android_sdk.write_license_files()
android_sdk.download_sdk_modules(build_tools_version=build_tools_version, platform_version=platform_version, ndk=True, system_image=args.systemimage)
